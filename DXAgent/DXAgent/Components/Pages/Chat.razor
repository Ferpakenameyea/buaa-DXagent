@page "/chat"
@inject IJSRuntime JS
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IFastGPTAPI fastGPTAPI
@inject IPromptTemplate promptTemplate
@inject ILogger<Chat> logger

@using Markdig
@using System.Text

<h1 style="display:flex; align-self:center">Chat With An Agent</h1>
<br/>
<br/>

<div class="chat-box-wrap">
	<div class="dialog-overlay">
		<div class="dialog-box">
			<div style="display: flex; height: 50px; margin-left:3%; margin-right: 3%; margin-top: 20px; border: solid 3px; border-color: gainsboro; border-radius: 10px; max-width: 100%; width: fit-content;">
				<label style="margin-left: 2%; align-self:center; font-weight: 1000; margin-right: 20px;">需要我做些什么？</label>
				<select @bind="SelectedOption" class="form-select" style="align-self: center; max-width: 50%; height: 90%;">
					<option value="Chat">和我聊天……</option>
					<option value="CodeExplain">解释我的代码……</option>
					<option value="Rewrite">改写我的文本……</option>
				</select>
			</div>
			<div class="history-area">
				@foreach (var history in this.fastGPTAPI.Histories)
				{
					<div class="chat-history-box">
						<div style="margin-left: 3%; margin-right: 3%; font-weight: bold; font-size: 20px; font-family: 'Cascadia Code';
							@(history.ChatRole == ChatRole.Assistant ? "text-align: left;" : "text-align: right")">
							@history.ChatRole.ToString()
						</div>
						<div class="history-content" style="@(history.ChatRole == ChatRole.User ? "margin-left: auto" : "")">
							@((MarkupString)RenderMarkdown(history.Content ?? ""))
						</div>
					</div>
				}
			</div>
			<div class="chat-input-box" @ref="inputBoxRef">
				<textarea 
				@ref="textAreaRef"
				@bind="userInput"
				oninput="@OnInput"
				rows="1"
				placeholder="talk to the assistant..."
				class="chat-input"/>

				<button onclick="@OnMouseClick" disabled="@IsSubmitting" class="btn btn-primary btn-lg" style="line-height: 100%">Submit</button>
			</div>
		</div>
	</div>
</div>

@code {
	private ElementReference inputBoxRef;
	private ElementReference textAreaRef;

	private string userInput = "";

	private string SelectedOption { get; set; } = "Chat";
	private bool IsSubmitting { get; set; } = false;

	public async Task OnInput()
	{
		await JS.InvokeVoidAsync("resizeTextArea", inputBoxRef, textAreaRef);
	}

	private async Task OnMouseClick()
	{
		IsSubmitting = true;
		var input = userInput;
		string prompt = "";
		try
		{
			var type = Enum.Parse<PromptTemplateType>(SelectedOption, ignoreCase: true);
			prompt = this.promptTemplate.FromRaw(userInput, type);	
		}
		catch (ArgumentException e)
		{
			logger.LogError("Invalid argument: {Message}", e.Message);
			IsSubmitting = false;
			return;
		}
		this.userInput = "";

		await this.fastGPTAPI.SendChatRequest(prompt: prompt, content => {
			StateHasChanged();
		}, stateChange: StateHasChanged);

		StateHasChanged();
		IsSubmitting = false;
		return;
	}

	private string RenderMarkdown(string markdown)
	{
		var pipeline = new MarkdownPipelineBuilder()
						.UseAdvancedExtensions() // Enable advanced features (like code highlighting, etc.)
						.Build();
		return Markdown.ToHtml(markdown, pipeline);
	}
}
